{
  "questions": [
    {
      "qid": 1,
      "prompt": {
        "title": "2Adder",
        "text": "Create a function that adds two numbers"
      },
      "test_cases": {
        "1": {
          "inputs": "1 1",
          "output": "2"
        },
        "2": {
          "inputs": "-1 3",
          "output": "2"
        }
      },
      "code": {
        "python": {
          "starter_code": "def adder(a, b):\n\t#write code here",
          "context_code": "import sys\ndef main():\n\tsys.exit( 0 if adder( int(sys.argv[1]), int(sys.argv[2])) == int(sys.argv[3]) else 1 )"
        },
        "c": {
          "starter_code": "int adder(int a, int b){\n\t//enter code here\n}",
          "context_code": "#include <stdlib.h>\nint adder(int a, int b);\nint main(int argc, char *argv[]){\n\tif( adder( atoi( argv[ 1 ] ), atoi( argv[ 2 ] ) ) == atoi( argv[ 3 ] ) ){return 0;}else{return 1;}\n}"
        }
      }
    },
    {
      "qid": 100,
      "prompt": {
        "title": "How Long until the 4->2->1->4 Cycle",
        "text": "There is a pattern by which you take some input number, and repeate the following process upon it:\n -If it is divisible by 2, divide it by 2. \n -If not, multiply it by 3 and add 1. \nThis always seems to end in the cycle seen in the title. Write a function that takes some positive input int, and tells how many steps have to be nexecuted on the number until the cycle occurs. For example, 8 or 1 would be 4 and 16 would output 5."
      },
      "test_cases": {
        "1": {
          "inputs": "1",
          "output": "4"
        },
        "2": {
          "inputs": "16",
          "output": "5"
        },
        "3": {
          "inputs": "8",
          "output": "4"
        },
        "4": {
          "inputs": "11",
          "output": "15"
        },
        "5": {
          "inputs": "13",
          "output": "9"
        }
      },
      "code": {
        "python": {
          "starter_code": "def cycle(a):\n\t#write code here",
          "context_code": "import sys\ndef main():\n\tsys.exit( 0 if cycle( int(sys.argv[1])) == int(sys.argv[2]) else 1 )"
        },
        "c": {
          "starter_code": "int cycle(int a){\n\t//enter code here\n}",
          "context_code": "#include <stdlib.h>\nint cycle(int a);\nint main(int argc, char *argv[]){\n\tif( cycle( atoi( argv[ 1 ] ) ) == atoi( argv[ 2 ] ) ){return 0;}else{return 1;}\n}"
        }
      }
    },
    {
      "qid": 2,
      "prompt": {
        "title": "2Subber",
        "text": "Create a function that subtracts two numbers"
      },
      "test_cases": {
        "1": {
          "inputs": "1 1",
          "output": "0"
        },
        "2": {
          "inputs": "-1 3",
          "output": "-4"
        }
      },
      "code": {
        "python": {
          "starter_code": "def subber(a, b):\n\t#write code here",
          "context_code": "import sys\ndef main():\n\tsys.exit( 0 if subber( int(sys.argv[1]), int(sys.argv[2])) == int(sys.argv[3]) else 1 )"
        },
        "c": {
          "starter_code": "int subber(int a, int b){\n\t//enter code here\n}",
          "context_code": "#include <stdlib.h>\nint subber(int a, int b);\nint main(int argc, char *argv[]){\n\tif( subber( atoi( argv[ 1 ] ), atoi( argv[ 2 ] ) ) == atoi( argv[ 3 ] ) ){return 0;}else{return 1;}\n}"
        }
      }
    },
    {
      "qid": 3,
      "prompt": {
        "title": "Fibonacci",
        "text": "Create a function that computes the Fibonacci Numbers"
      },
      "test_cases": {
        "1": {
          "inputs": "2",
          "output": "1"
        },
        "2": {
          "inputs": "1",
          "output": "1"
        },
        "3": {
          "inputs": "15",
          "output": "610"
        },
        "4": {
          "inputs": "25",
          "output": "75025"
        }
      },
      "code": {
        "python": {
          "starter_code": "def fib(a):\n\t#write code here",
          "context_code": "import sys\ndef main():\n\tsys.exit( 0 if fib( int(sys.argv[1])) == int(sys.argv[2]) else 1 )"
        },
        "c": {
          "starter_code": "int fib(int a){\n\t//enter code here\n}",
          "context_code": "#include <stdlib.h>\nint fib(int a);\nint main(int argc, char *argv[]){\n\tif( fib( atoi( argv[ 1 ] ) ) == atoi( argv[ 2 ] ) ){return 0;}else{return 1;}\n}"
        }
      }
    },
    {
      "qid": 4,
      "prompt": {
        "title": "Factorial",
        "text": "Create a function that computes the Factorial"
      },
      "test_cases": {
        "1": {
          "inputs": "0",
          "output": "1"
        },
        "2": {
          "inputs": "1",
          "output": "1"
        },
        "3": {
          "inputs": "2",
          "output": "2"
        },
        "4": {
          "inputs": "3",
          "output": "6"
        },
        "5": {
          "inputs": "4",
          "output": "24"
        }
      },
      "code": {
        "python": {
          "starter_code": "def fact(a):\n\t#write code here",
          "context_code": "import sys\ndef main():\n\tsys.exit( 0 if fact( int(sys.argv[1])) == int(sys.argv[2]) else 1 )"
        },
        "c": {
          "starter_code": "int fact(int a){\n\t//enter code here\n}",
          "context_code": "#include <stdlib.h>\nint fact(int a);\nint main(int argc, char *argv[]){\n\tif( fact( atoi( argv[ 1 ] ) ) == atoi( argv[ 2 ] ) ){return 0;}else{return 1;}\n}"
        }
      }
    },
    {
      "qid": 5,
      "prompt": {
        "title": "NAdder",
        "text": "Create a function that adds N amount of numbers"
      },
      "test_cases": {
        "1": {
          "inputs": "1 1 1",
          "output": "3"
        },
        "2": {
          "inputs": "1 2 3 4 5 6",
          "output": "21"
        }
      },
      "code": {
        "python": {
          "starter_code": "# LinkedList has the following functions\n# push( val, index : int )\n# pop( index : int )\n# get( index : int )\n# reverse()\n#length()\ndef adder( l : LinkedList ):\n\t# Add code here",
          "context_code": "import sys\nfrom python.linked_list import LinkedList\n\ndef main():\n\tnumber_of_inputs = int( sys.argv[ len( sys.argv ) - 2 ] )\n\toutput = int( sys.argv[ number_of_inputs + 1 ] )\n\ttemp_list = LinkedList()\n\n\tfor i in range( 1, number_of_inputs + 1 ):\n\t\ttemp_list.push( int( sys.argv[ i ] ), temp_list.length() )\n\n\tsys.exit( 0 if adder(temp_list) == output else 1 )"
        },
        "c": {
          "starter_code": "// linked_list_t has the following functions\n// ->void linked_list_push( linked_list_t * list, void * val, index : int )\n// ->void * linked_list_pop( linked_list_t * list, index : int )\n// void * linked_list_get( linked_list_t * list, index : int )\n// ->void reverse( linked_list_t * list )\nint adder( linked_list_t * list )\n\t{\n\t// add code here\n\t}",
          "context_code": "#include <stdlib.h>\n#include \"c/linked_list.h\"\n\nint adder( linked_list_t * list );\n\nint main( int argc, char * argv[] )\n\t{\n\tint ret_val;\n\tint number_of_inputs = atoi( argv[ argc - 2 ] );\n\tint output = atoi( argv[ number_of_inputs + 1 ] );\n\tlinked_list_t num_list;\n\n\tlinked_list_init( &num_list );\n\n\tfor( int i = 1; i <= number_of_inputs; i++ )\n\t\t{\n\t\tint * temp = ( int * ) malloc( sizeof( int ) );\n\t\t*temp = atoi( argv[ i ] );\n\t\t( *( num_list.linked_list_push ) )( &num_list, temp, num_list.length );\n\t\t}\n\n\tif( adder( &num_list ) == output )\n\t\t{\n\t\tret_val = 0;\n\t\t}\n\telse\n\t\t{\n\t\tret_val = 1;\n\t\t}\n\n\tfor( int i = 0; i < num_list.length; i++ )\n\t\t{\n\t\tfree( ( int * ) linked_list_get( &num_list, i ) );\n\t\t}\n\n\tlinked_list_destroy( &num_list );\n\n\treturn ret_val;\n\t}"
        }
      }
    }
  ]
}